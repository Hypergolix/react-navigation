{"version":3,"sources":["NavigationContainer.tsx"],"names":["global","REACT_NAVIGATION_DEVTOOLS","WeakMap","NavigationContainerInner","ref","theme","DefaultTheme","linking","fallback","documentTitle","onReady","rest","isLinkingEnabled","enabled","config","refContainer","React","useRef","getInitialState","independent","prefixes","useEffect","current","set","getStateFromPath","getPathFromState","getActionFromState","isResolved","initialState","useImperativeHandle","linkingContext","useMemo","options","isReady","onReadyRef","NavigationContainer","forwardRef"],"mappings":"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","sourcesContent":["import {\r\n  BaseNavigationContainer,\r\n  getActionFromState,\r\n  getPathFromState,\r\n  getStateFromPath,\r\n  NavigationContainerProps,\r\n  NavigationContainerRef,\r\n  ParamListBase,\r\n  validatePathConfig,\r\n} from '@react-navigation/core';\r\nimport * as React from 'react';\r\n\r\nimport LinkingContext from './LinkingContext';\r\nimport DefaultTheme from './theming/DefaultTheme';\r\nimport ThemeProvider from './theming/ThemeProvider';\r\nimport type { DocumentTitleOptions, LinkingOptions, Theme } from './types';\r\nimport useBackButton from './useBackButton';\r\nimport useDocumentTitle from './useDocumentTitle';\r\nimport useLinking from './useLinking';\r\nimport useThenable from './useThenable';\r\n\r\ndeclare global {\r\n  var REACT_NAVIGATION_DEVTOOLS: WeakMap<\r\n    NavigationContainerRef<any>,\r\n    { readonly linking: LinkingOptions<any> }\r\n  >;\r\n}\r\n\r\nglobal.REACT_NAVIGATION_DEVTOOLS = new WeakMap();\r\n\r\ntype Props<ParamList extends {}> = NavigationContainerProps & {\r\n  theme?: Theme;\r\n  linking?: LinkingOptions<ParamList>;\r\n  fallback?: React.ReactNode;\r\n  documentTitle?: DocumentTitleOptions;\r\n  onReady?: () => void;\r\n};\r\n\r\n/**\r\n * Container component which holds the navigation state designed for React Native apps.\r\n * This should be rendered at the root wrapping the whole app.\r\n *\r\n * @param props.initialState Initial state object for the navigation tree. When deep link handling is enabled, this will override deep links when specified. Make sure that you don't specify an `initialState` when there's a deep link (`Linking.getInitialURL()`).\r\n * @param props.onReady Callback which is called after the navigation tree mounts.\r\n * @param props.onStateChange Callback which is called with the latest navigation state when it changes.\r\n * @param props.theme Theme object for the navigators.\r\n * @param props.linking Options for deep linking. Deep link handling is enabled when this prop is provided, unless `linking.enabled` is `false`.\r\n * @param props.fallback Fallback component to render until we have finished getting initial state when linking is enabled. Defaults to `null`.\r\n * @param props.documentTitle Options to configure the document title on Web. Updating document title is handled by default unless `documentTitle.enabled` is `false`.\r\n * @param props.children Child elements to render the content.\r\n * @param props.ref Ref object which refers to the navigation object containing helper methods.\r\n */\r\nfunction NavigationContainerInner(\r\n  {\r\n    theme = DefaultTheme,\r\n    linking,\r\n    fallback = null,\r\n    documentTitle,\r\n    onReady,\r\n    ...rest\r\n  }: Props<ParamListBase>,\r\n  ref?: React.Ref<NavigationContainerRef<ParamListBase> | null>\r\n) {\r\n  const isLinkingEnabled = linking ? linking.enabled !== false : false;\r\n\r\n  if (linking?.config) {\r\n    validatePathConfig(linking.config);\r\n  }\r\n\r\n  const refContainer =\r\n    React.useRef<NavigationContainerRef<ParamListBase>>(null);\r\n\r\n  useBackButton(refContainer);\r\n  useDocumentTitle(refContainer, documentTitle);\r\n\r\n  const { getInitialState } = useLinking(refContainer, {\r\n    independent: rest.independent,\r\n    enabled: isLinkingEnabled,\r\n    prefixes: [],\r\n    ...linking,\r\n  });\r\n\r\n  // Add additional linking related info to the ref\r\n  // This will be used by the devtools\r\n  React.useEffect(() => {\r\n    if (refContainer.current) {\r\n      REACT_NAVIGATION_DEVTOOLS.set(refContainer.current, {\r\n        get linking() {\r\n          return {\r\n            ...linking,\r\n            enabled: isLinkingEnabled,\r\n            prefixes: linking?.prefixes ?? [],\r\n            getStateFromPath: linking?.getStateFromPath ?? getStateFromPath,\r\n            getPathFromState: linking?.getPathFromState ?? getPathFromState,\r\n            getActionFromState:\r\n              linking?.getActionFromState ?? getActionFromState,\r\n          };\r\n        },\r\n      });\r\n    }\r\n  });\r\n\r\n  const [isResolved, initialState] = useThenable(getInitialState);\r\n\r\n  React.useImperativeHandle(ref, () => refContainer.current);\r\n\r\n  const linkingContext = React.useMemo(() => ({ options: linking }), [linking]);\r\n\r\n  const isReady = rest.initialState != null || !isLinkingEnabled || isResolved;\r\n\r\n  const onReadyRef = React.useRef(onReady);\r\n\r\n  React.useEffect(() => {\r\n    onReadyRef.current = onReady;\r\n  });\r\n\r\n  React.useEffect(() => {\r\n    if (isReady) {\r\n      onReadyRef.current?.();\r\n    }\r\n  }, [isReady]);\r\n\r\n  if (!isReady) {\r\n    // This is temporary until we have Suspense for data-fetching\r\n    // Then the fallback will be handled by a parent `Suspense` component\r\n    return fallback as React.ReactElement;\r\n  }\r\n\r\n  return (\r\n    <LinkingContext.Provider value={linkingContext}>\r\n      <ThemeProvider value={theme}>\r\n        <BaseNavigationContainer\r\n          {...rest}\r\n          initialState={\r\n            rest.initialState == null ? initialState : rest.initialState\r\n          }\r\n          ref={refContainer}\r\n        />\r\n      </ThemeProvider>\r\n    </LinkingContext.Provider>\r\n  );\r\n}\r\n\r\nconst NavigationContainer = React.forwardRef(NavigationContainerInner) as <\r\n  RootParamList extends {} = ReactNavigation.RootParamList\r\n>(\r\n  props: Props<RootParamList> & {\r\n    ref?: React.Ref<NavigationContainerRef<RootParamList>>;\r\n  }\r\n) => React.ReactElement;\r\n\r\nexport default NavigationContainer;\r\n"]}