{"version":3,"sources":["useLinkProps.tsx"],"names":["getStateFromParams","params","state","screen","routes","name","undefined","useLinkProps","to","action","root","React","useContext","NavigationContainerRefContext","navigation","NavigationHelpersContext","options","LinkingContext","linkTo","onPress","e","shouldHandle","Platform","OS","defaultPrevented","metaKey","altKey","ctrlKey","shiftKey","button","includes","currentTarget","target","preventDefault","dispatch","Error","getPathFromStateHelper","getPathFromState","href","config","accessibilityRole"],"mappings":"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","sourcesContent":["import {\r\n  getPathFromState,\r\n  NavigationAction,\r\n  NavigationContainerRefContext,\r\n  NavigationHelpersContext,\r\n  NavigatorScreenParams,\r\n  ParamListBase,\r\n} from '@react-navigation/core';\r\nimport type { NavigationState, PartialState } from '@react-navigation/routers';\r\nimport * as React from 'react';\r\nimport { GestureResponderEvent, Platform } from 'react-native';\r\n\r\nimport LinkingContext from './LinkingContext';\r\nimport useLinkTo, { To } from './useLinkTo';\r\n\r\ntype Props<ParamList extends ReactNavigation.RootParamList> = {\r\n  to: To<ParamList>;\r\n  action?: NavigationAction;\r\n};\r\n\r\nconst getStateFromParams = (\r\n  params: NavigatorScreenParams<ParamListBase, NavigationState> | undefined\r\n): PartialState<NavigationState> | NavigationState | undefined => {\r\n  if (params?.state) {\r\n    return params.state;\r\n  }\r\n\r\n  if (params?.screen) {\r\n    return {\r\n      routes: [\r\n        {\r\n          name: params.screen,\r\n          params: params.params,\r\n          // @ts-expect-error\r\n          state: params.screen\r\n            ? getStateFromParams(\r\n                params.params as\r\n                  | NavigatorScreenParams<ParamListBase, NavigationState>\r\n                  | undefined\r\n              )\r\n            : undefined,\r\n        },\r\n      ],\r\n    };\r\n  }\r\n\r\n  return undefined;\r\n};\r\n\r\n/**\r\n * Hook to get props for an anchor tag so it can work with in page navigation.\r\n *\r\n * @param props.to Absolute path to screen (e.g. `/feeds/hot`).\r\n * @param props.action Optional action to use for in-page navigation. By default, the path is parsed to an action based on linking config.\r\n */\r\nexport default function useLinkProps<\r\n  ParamList extends ReactNavigation.RootParamList\r\n>({ to, action }: Props<ParamList>) {\r\n  const root = React.useContext(NavigationContainerRefContext);\r\n  const navigation = React.useContext(NavigationHelpersContext);\r\n  const { options } = React.useContext(LinkingContext);\r\n  const linkTo = useLinkTo<ParamList>();\r\n\r\n  const onPress = (\r\n    e?: React.MouseEvent<HTMLAnchorElement, MouseEvent> | GestureResponderEvent\r\n  ) => {\r\n    let shouldHandle = false;\r\n\r\n    if (Platform.OS !== 'web' || !e) {\r\n      shouldHandle = e ? !e.defaultPrevented : true;\r\n    } else if (\r\n      !e.defaultPrevented && // onPress prevented default\r\n      // @ts-expect-error: these properties exist on web, but not in React Native\r\n      !(e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) && // ignore clicks with modifier keys\r\n      // @ts-expect-error: these properties exist on web, but not in React Native\r\n      (e.button == null || e.button === 0) && // ignore everything but left clicks\r\n      // @ts-expect-error: these properties exist on web, but not in React Native\r\n      [undefined, null, '', 'self'].includes(e.currentTarget?.target) // let browser handle \"target=_blank\" etc.\r\n    ) {\r\n      e.preventDefault();\r\n      shouldHandle = true;\r\n    }\r\n\r\n    if (shouldHandle) {\r\n      if (action) {\r\n        if (navigation) {\r\n          navigation.dispatch(action);\r\n        } else if (root) {\r\n          root.dispatch(action);\r\n        } else {\r\n          throw new Error(\r\n            \"Couldn't find a navigation object. Is your component inside NavigationContainer?\"\r\n          );\r\n        }\r\n      } else {\r\n        linkTo(to);\r\n      }\r\n    }\r\n  };\r\n\r\n  const getPathFromStateHelper = options?.getPathFromState ?? getPathFromState;\r\n\r\n  const href =\r\n    typeof to === 'string'\r\n      ? to\r\n      : getPathFromStateHelper(\r\n          {\r\n            routes: [\r\n              {\r\n                name: to.screen,\r\n                // @ts-expect-error\r\n                params: to.params,\r\n                // @ts-expect-error\r\n                state: getStateFromParams(to.params),\r\n              },\r\n            ],\r\n          },\r\n          options?.config\r\n        );\r\n\r\n  return {\r\n    href,\r\n    accessibilityRole: 'link' as const,\r\n    onPress,\r\n  };\r\n}\r\n"]}