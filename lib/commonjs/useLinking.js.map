{"version":3,"sources":["useLinking.tsx"],"names":["findMatchingState","a","b","undefined","key","aHistoryLength","history","length","routes","bHistoryLength","aRoute","index","bRoute","aChildState","state","bChildState","series","cb","handling","queue","callback","unshift","last","pop","linkingHandlers","useLinking","ref","independent","enabled","config","getStateFromPath","getStateFromPathDefault","getPathFromState","getPathFromStateDefault","getActionFromState","getActionFromStateDefault","React","useEffect","process","env","NODE_ENV","console","error","join","trim","handler","Symbol","push","indexOf","splice","useState","createMemoryHistory","enabledRef","useRef","configRef","getStateFromPathRef","getPathFromStateRef","getActionFromStateRef","current","server","useContext","ServerContext","getInitialState","useCallback","value","location","window","path","pathname","search","thenable","then","onfulfilled","Promise","resolve","catch","previousIndexRef","previousStateRef","pendingPopStatePathRef","listen","navigation","previousIndex","record","get","resetRoot","rootState","getRootState","some","r","routeNames","includes","name","warn","action","dispatch","e","message","getPathForRoute","route","stateForPath","focusedRoute","params","replace","onStateChange","previousState","pendingPath","previousFocusedState","focusedState","historyDelta","nextIndex","backIndex","currentIndex","go","addListener"],"mappings":"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","sourcesContent":["import {\r\n  findFocusedRoute,\r\n  getActionFromState as getActionFromStateDefault,\r\n  getPathFromState as getPathFromStateDefault,\r\n  getStateFromPath as getStateFromPathDefault,\r\n  NavigationContainerRef,\r\n  NavigationState,\r\n  ParamListBase,\r\n} from '@react-navigation/core';\r\nimport isEqual from 'fast-deep-equal';\r\nimport * as React from 'react';\r\n\r\nimport createMemoryHistory from './createMemoryHistory';\r\nimport ServerContext from './ServerContext';\r\nimport type { LinkingOptions } from './types';\r\n\r\ntype ResultState = ReturnType<typeof getStateFromPathDefault>;\r\n\r\n/**\r\n * Find the matching navigation state that changed between 2 navigation states\r\n * e.g.: a -> b -> c -> d and a -> b -> c -> e -> f, if history in b changed, b is the matching state\r\n */\r\nconst findMatchingState = <T extends NavigationState>(\r\n  a: T | undefined,\r\n  b: T | undefined\r\n): [T | undefined, T | undefined] => {\r\n  if (a === undefined || b === undefined || a.key !== b.key) {\r\n    return [undefined, undefined];\r\n  }\r\n\r\n  // Tab and drawer will have `history` property, but stack will have history in `routes`\r\n  const aHistoryLength = a.history ? a.history.length : a.routes.length;\r\n  const bHistoryLength = b.history ? b.history.length : b.routes.length;\r\n\r\n  const aRoute = a.routes[a.index];\r\n  const bRoute = b.routes[b.index];\r\n\r\n  const aChildState = aRoute.state as T | undefined;\r\n  const bChildState = bRoute.state as T | undefined;\r\n\r\n  // Stop here if this is the state object that changed:\r\n  // - history length is different\r\n  // - focused routes are different\r\n  // - one of them doesn't have child state\r\n  // - child state keys are different\r\n  if (\r\n    aHistoryLength !== bHistoryLength ||\r\n    aRoute.key !== bRoute.key ||\r\n    aChildState === undefined ||\r\n    bChildState === undefined ||\r\n    aChildState.key !== bChildState.key\r\n  ) {\r\n    return [a, b];\r\n  }\r\n\r\n  return findMatchingState(aChildState, bChildState);\r\n};\r\n\r\n/**\r\n * Run async function in series as it's called.\r\n */\r\nconst series = (cb: () => Promise<void>) => {\r\n  // Whether we're currently handling a callback\r\n  let handling = false;\r\n  let queue: (() => Promise<void>)[] = [];\r\n\r\n  const callback = async () => {\r\n    try {\r\n      if (handling) {\r\n        // If we're currently handling a previous event, wait before handling this one\r\n        // Add the callback to the beginning of the queue\r\n        queue.unshift(callback);\r\n        return;\r\n      }\r\n\r\n      handling = true;\r\n\r\n      await cb();\r\n    } finally {\r\n      handling = false;\r\n\r\n      if (queue.length) {\r\n        // If we have queued items, handle the last one\r\n        const last = queue.pop();\r\n\r\n        last?.();\r\n      }\r\n    }\r\n  };\r\n\r\n  return callback;\r\n};\r\n\r\nlet linkingHandlers: Symbol[] = [];\r\n\r\ntype Options = LinkingOptions<ParamListBase> & {\r\n  independent?: boolean;\r\n};\r\n\r\nexport default function useLinking(\r\n  ref: React.RefObject<NavigationContainerRef<ParamListBase>>,\r\n  {\r\n    independent,\r\n    enabled = true,\r\n    config,\r\n    getStateFromPath = getStateFromPathDefault,\r\n    getPathFromState = getPathFromStateDefault,\r\n    getActionFromState = getActionFromStateDefault,\r\n  }: Options\r\n) {\r\n  React.useEffect(() => {\r\n    if (process.env.NODE_ENV === 'production') {\r\n      return undefined;\r\n    }\r\n\r\n    if (independent) {\r\n      return undefined;\r\n    }\r\n\r\n    if (enabled !== false && linkingHandlers.length) {\r\n      console.error(\r\n        [\r\n          'Looks like you have configured linking in multiple places. This is likely an error since deep links should only be handled in one place to avoid conflicts. Make sure that:',\r\n          \"- You don't have multiple NavigationContainers in the app each with 'linking' enabled\",\r\n          '- Only a single instance of the root component is rendered',\r\n        ]\r\n          .join('\\n')\r\n          .trim()\r\n      );\r\n    }\r\n\r\n    const handler = Symbol();\r\n\r\n    if (enabled !== false) {\r\n      linkingHandlers.push(handler);\r\n    }\r\n\r\n    return () => {\r\n      const index = linkingHandlers.indexOf(handler);\r\n\r\n      if (index > -1) {\r\n        linkingHandlers.splice(index, 1);\r\n      }\r\n    };\r\n  }, [enabled, independent]);\r\n\r\n  const [history] = React.useState(createMemoryHistory);\r\n\r\n  // We store these options in ref to avoid re-creating getInitialState and re-subscribing listeners\r\n  // This lets user avoid wrapping the items in `React.useCallback` or `React.useMemo`\r\n  // Not re-creating `getInitialState` is important coz it makes it easier for the user to use in an effect\r\n  const enabledRef = React.useRef(enabled);\r\n  const configRef = React.useRef(config);\r\n  const getStateFromPathRef = React.useRef(getStateFromPath);\r\n  const getPathFromStateRef = React.useRef(getPathFromState);\r\n  const getActionFromStateRef = React.useRef(getActionFromState);\r\n\r\n  React.useEffect(() => {\r\n    enabledRef.current = enabled;\r\n    configRef.current = config;\r\n    getStateFromPathRef.current = getStateFromPath;\r\n    getPathFromStateRef.current = getPathFromState;\r\n    getActionFromStateRef.current = getActionFromState;\r\n  });\r\n\r\n  const server = React.useContext(ServerContext);\r\n\r\n  const getInitialState = React.useCallback(() => {\r\n    let value: ResultState | undefined;\r\n\r\n    if (enabledRef.current) {\r\n      const location =\r\n        server?.location ??\r\n        (typeof window !== 'undefined' ? window.location : undefined);\r\n\r\n      const path = location ? location.pathname + location.search : undefined;\r\n\r\n      if (path) {\r\n        value = getStateFromPathRef.current(path, configRef.current);\r\n      }\r\n    }\r\n\r\n    const thenable = {\r\n      then(onfulfilled?: (state: ResultState | undefined) => void) {\r\n        return Promise.resolve(onfulfilled ? onfulfilled(value) : value);\r\n      },\r\n      catch() {\r\n        return thenable;\r\n      },\r\n    };\r\n\r\n    return thenable as PromiseLike<ResultState | undefined>;\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  const previousIndexRef = React.useRef<number | undefined>(undefined);\r\n  const previousStateRef = React.useRef<NavigationState | undefined>(undefined);\r\n  const pendingPopStatePathRef = React.useRef<string | undefined>(undefined);\r\n\r\n  React.useEffect(() => {\r\n    previousIndexRef.current = history.index;\r\n\r\n    return history.listen(() => {\r\n      const navigation = ref.current;\r\n\r\n      if (!navigation || !enabled) {\r\n        return;\r\n      }\r\n\r\n      const path = location.pathname + location.search;\r\n      const index = history.index;\r\n\r\n      const previousIndex = previousIndexRef.current ?? 0;\r\n\r\n      previousIndexRef.current = index;\r\n      pendingPopStatePathRef.current = path;\r\n\r\n      // When browser back/forward is clicked, we first need to check if state object for this index exists\r\n      // If it does we'll reset to that state object\r\n      // Otherwise, we'll handle it like a regular deep link\r\n      const record = history.get(index);\r\n\r\n      if (record?.path === path && record?.state) {\r\n        navigation.resetRoot(record.state);\r\n        return;\r\n      }\r\n\r\n      const state = getStateFromPathRef.current(path, configRef.current);\r\n\r\n      // We should only dispatch an action when going forward\r\n      // Otherwise the action will likely add items to history, which would mess things up\r\n      if (state) {\r\n        // Make sure that the routes in the state exist in the root navigator\r\n        // Otherwise there's an error in the linking configuration\r\n        const rootState = navigation.getRootState();\r\n\r\n        if (state.routes.some((r) => !rootState?.routeNames.includes(r.name))) {\r\n          console.warn(\r\n            \"The navigation state parsed from the URL contains routes not present in the root navigator. This usually means that the linking configuration doesn't match the navigation structure. See https://reactnavigation.org/docs/configuring-links for more details on how to specify a linking configuration.\"\r\n          );\r\n          return;\r\n        }\r\n\r\n        if (index > previousIndex) {\r\n          const action = getActionFromStateRef.current(\r\n            state,\r\n            configRef.current\r\n          );\r\n\r\n          if (action !== undefined) {\r\n            try {\r\n              navigation.dispatch(action);\r\n            } catch (e) {\r\n              // Ignore any errors from deep linking.\r\n              // This could happen in case of malformed links, navigation object not being initialized etc.\r\n              console.warn(\r\n                `An error occurred when trying to handle the link '${path}': ${\r\n                  typeof e === 'object' && e != null && 'message' in e\r\n                    ? // @ts-expect-error: we're already checking for this\r\n                      e.message\r\n                    : e\r\n                }`\r\n              );\r\n            }\r\n          } else {\r\n            navigation.resetRoot(state);\r\n          }\r\n        } else {\r\n          navigation.resetRoot(state);\r\n        }\r\n      } else {\r\n        // if current path didn't return any state, we should revert to initial state\r\n        navigation.resetRoot(state);\r\n      }\r\n    });\r\n  }, [enabled, history, ref]);\r\n\r\n  React.useEffect(() => {\r\n    if (!enabled) {\r\n      return;\r\n    }\r\n\r\n    const getPathForRoute = (\r\n      route: ReturnType<typeof findFocusedRoute>,\r\n      state: NavigationState\r\n    ): string => {\r\n      // If the `route` object contains a `path`, use that path as long as `route.name` and `params` still match\r\n      // This makes sure that we preserve the original URL for wildcard routes\r\n      if (route?.path) {\r\n        const stateForPath = getStateFromPathRef.current(\r\n          route.path,\r\n          configRef.current\r\n        );\r\n\r\n        if (stateForPath) {\r\n          const focusedRoute = findFocusedRoute(stateForPath);\r\n\r\n          if (\r\n            focusedRoute &&\r\n            focusedRoute.name === route.name &&\r\n            isEqual(focusedRoute.params, route.params)\r\n          ) {\r\n            return route.path;\r\n          }\r\n        }\r\n      }\r\n\r\n      return getPathFromStateRef.current(state, configRef.current);\r\n    };\r\n\r\n    if (ref.current) {\r\n      // We need to record the current metadata on the first render if they aren't set\r\n      // This will allow the initial state to be in the history entry\r\n      const state = ref.current.getRootState();\r\n\r\n      if (state) {\r\n        const route = findFocusedRoute(state);\r\n        const path = getPathForRoute(route, state);\r\n\r\n        if (previousStateRef.current === undefined) {\r\n          previousStateRef.current = state;\r\n        }\r\n\r\n        history.replace({ path, state });\r\n      }\r\n    }\r\n\r\n    const onStateChange = async () => {\r\n      const navigation = ref.current;\r\n\r\n      if (!navigation || !enabled) {\r\n        return;\r\n      }\r\n\r\n      const previousState = previousStateRef.current;\r\n      const state = navigation.getRootState();\r\n\r\n      // root state may not available, for example when root navigators switch inside the container\r\n      if (!state) {\r\n        return;\r\n      }\r\n\r\n      const pendingPath = pendingPopStatePathRef.current;\r\n      const route = findFocusedRoute(state);\r\n      const path = getPathForRoute(route, state);\r\n\r\n      previousStateRef.current = state;\r\n      pendingPopStatePathRef.current = undefined;\r\n\r\n      // To detect the kind of state change, we need to:\r\n      // - Find the common focused navigation state in previous and current state\r\n      // - If only the route keys changed, compare history/routes.length to check if we go back/forward/replace\r\n      // - If no common focused navigation state found, it's a replace\r\n      const [previousFocusedState, focusedState] = findMatchingState(\r\n        previousState,\r\n        state\r\n      );\r\n\r\n      if (\r\n        previousFocusedState &&\r\n        focusedState &&\r\n        // We should only handle push/pop if path changed from what was in last `popstate`\r\n        // Otherwise it's likely a change triggered by `popstate`\r\n        path !== pendingPath\r\n      ) {\r\n        const historyDelta =\r\n          (focusedState.history\r\n            ? focusedState.history.length\r\n            : focusedState.routes.length) -\r\n          (previousFocusedState.history\r\n            ? previousFocusedState.history.length\r\n            : previousFocusedState.routes.length);\r\n\r\n        if (historyDelta > 0) {\r\n          // If history length is increased, we should pushState\r\n          // Note that path might not actually change here, for example, drawer open should pushState\r\n          history.push({ path, state });\r\n        } else if (historyDelta < 0) {\r\n          // If history length is decreased, i.e. entries were removed, we want to go back\r\n\r\n          const nextIndex = history.backIndex({ path });\r\n          const currentIndex = history.index;\r\n\r\n          try {\r\n            if (nextIndex !== -1 && nextIndex < currentIndex) {\r\n              // An existing entry for this path exists and it's less than current index, go back to that\r\n              await history.go(nextIndex - currentIndex);\r\n            } else {\r\n              // We couldn't find an existing entry to go back to, so we'll go back by the delta\r\n              // This won't be correct if multiple routes were pushed in one go before\r\n              // Usually this shouldn't happen and this is a fallback for that\r\n              await history.go(historyDelta);\r\n            }\r\n\r\n            // Store the updated state as well as fix the path if incorrect\r\n            history.replace({ path, state });\r\n          } catch (e) {\r\n            // The navigation was interrupted\r\n          }\r\n        } else {\r\n          // If history length is unchanged, we want to replaceState\r\n          history.replace({ path, state });\r\n        }\r\n      } else {\r\n        // If no common navigation state was found, assume it's a replace\r\n        // This would happen if the user did a reset/conditionally changed navigators\r\n        history.replace({ path, state });\r\n      }\r\n    };\r\n\r\n    // We debounce onStateChange coz we don't want multiple state changes to be handled at one time\r\n    // This could happen since `history.go(n)` is asynchronous\r\n    // If `pushState` or `replaceState` were called before `history.go(n)` completes, it'll mess stuff up\r\n    return ref.current?.addListener('state', series(onStateChange));\r\n  });\r\n\r\n  return {\r\n    getInitialState,\r\n  };\r\n}\r\n"]}