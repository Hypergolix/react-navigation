{"version":3,"sources":["ServerContainer.tsx"],"names":["CurrentRenderContext","React","ServerContext","forwardRef","ServerContainer","ref","children","location","useEffect","console","error","current","value","getCurrentOptions","options"],"mappings":"AAAA,SAASA,oBAAT,QAAqC,wBAArC;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AAEA,OAAOC,aAAP,MAAiD,iBAAjD;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAAeD,KAAK,CAACE,UAAN,CAAiB,SAASC,eAAT,OAE9BC,GAF8B,EAG9B;AAAA,MAFA;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,GAEA;AACAN,EAAAA,KAAK,CAACO,SAAN,CAAgB,MAAM;AACpBC,IAAAA,OAAO,CAACC,KAAR,CACE,sFADF;AAGD,GAJD,EAIG,EAJH;AAMA,QAAMC,OAA6B,GAAG,EAAtC;;AAEA,MAAIN,GAAJ,EAAS;AACP,UAAMO,KAAK,GAAG;AACZC,MAAAA,iBAAiB,GAAG;AAClB,eAAOF,OAAO,CAACG,OAAf;AACD;;AAHW,KAAd,CADO,CAOP;AACA;AACA;AACA;;AACA,QAAI,OAAOT,GAAP,KAAe,UAAnB,EAA+B;AAC7BA,MAAAA,GAAG,CAACO,KAAD,CAAH;AACD,KAFD,MAEO;AACL;AACAP,MAAAA,GAAG,CAACM,OAAJ,GAAcC,KAAd;AACD;AACF;;AAED,sBACE,oBAAC,aAAD,CAAe,QAAf;AAAwB,IAAA,KAAK,EAAE;AAAEL,MAAAA;AAAF;AAA/B,kBACE,oBAAC,oBAAD,CAAsB,QAAtB;AAA+B,IAAA,KAAK,EAAEI;AAAtC,KACGL,QADH,CADF,CADF;AAOD,CAtCc,CAAf","sourcesContent":["import { CurrentRenderContext } from '@react-navigation/core';\r\nimport * as React from 'react';\r\n\r\nimport ServerContext, { ServerContextType } from './ServerContext';\r\nimport type { ServerContainerRef } from './types';\r\n\r\ntype Props = ServerContextType & {\r\n  children: React.ReactNode;\r\n};\r\n\r\n/**\r\n * Container component for server rendering.\r\n *\r\n * @param props.location Location object to base the initial URL for SSR.\r\n * @param props.children Child elements to render the content.\r\n * @param props.ref Ref object which contains helper methods.\r\n */\r\nexport default React.forwardRef(function ServerContainer(\r\n  { children, location }: Props,\r\n  ref: React.Ref<ServerContainerRef>\r\n) {\r\n  React.useEffect(() => {\r\n    console.error(\r\n      \"'ServerContainer' should only be used on the server with 'react-dom/server' for SSR.\"\r\n    );\r\n  }, []);\r\n\r\n  const current: { options?: object } = {};\r\n\r\n  if (ref) {\r\n    const value = {\r\n      getCurrentOptions() {\r\n        return current.options;\r\n      },\r\n    };\r\n\r\n    // We write to the `ref` during render instead of `React.useImperativeHandle`\r\n    // This is because `useImperativeHandle` will update the ref after 'commit',\r\n    // and there's no 'commit' phase during SSR.\r\n    // Mutating ref during render is unsafe in concurrent mode, but we don't care about it for SSR.\r\n    if (typeof ref === 'function') {\r\n      ref(value);\r\n    } else {\r\n      // @ts-expect-error: the TS types are incorrect and say that ref.current is readonly\r\n      ref.current = value;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <ServerContext.Provider value={{ location }}>\r\n      <CurrentRenderContext.Provider value={current}>\r\n        {children}\r\n      </CurrentRenderContext.Provider>\r\n    </ServerContext.Provider>\r\n  );\r\n});\r\n"]}