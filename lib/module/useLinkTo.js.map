{"version":3,"sources":["useLinkTo.tsx"],"names":["getActionFromState","getStateFromPath","NavigationContainerRefContext","React","LinkingContext","useLinkTo","navigation","useContext","linking","linkTo","useCallback","to","undefined","Error","navigate","screen","params","startsWith","options","state","config","action","dispatch","reset"],"mappings":"AAAA,SACEA,kBADF,EAEEC,gBAFF,EAGEC,6BAHF,QAIO,wBAJP;AAKA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AAEA,OAAOC,cAAP,MAA2B,kBAA3B;AAiBA,eAAe,SAASC,SAAT,GAEX;AACF,QAAMC,UAAU,GAAGH,KAAK,CAACI,UAAN,CAAiBL,6BAAjB,CAAnB;AACA,QAAMM,OAAO,GAAGL,KAAK,CAACI,UAAN,CAAiBH,cAAjB,CAAhB;AAEA,QAAMK,MAAM,GAAGN,KAAK,CAACO,WAAN,CACZC,EAAD,IAAuB;AACrB,QAAIL,UAAU,KAAKM,SAAnB,EAA8B;AAC5B,YAAM,IAAIC,KAAJ,CACJ,kFADI,CAAN;AAGD;;AAED,QAAI,OAAOF,EAAP,KAAc,QAAlB,EAA4B;AAC1B;AACAL,MAAAA,UAAU,CAACQ,QAAX,CAAoBH,EAAE,CAACI,MAAvB,EAA+BJ,EAAE,CAACK,MAAlC;AACA;AACD;;AAED,QAAI,CAACL,EAAE,CAACM,UAAH,CAAc,GAAd,CAAL,EAAyB;AACvB,YAAM,IAAIJ,KAAJ,CAAW,iCAAgCF,EAAG,IAA9C,CAAN;AACD;;AAED,UAAM;AAAEO,MAAAA;AAAF,QAAcV,OAApB;AAEA,UAAMW,KAAK,GAAGD,OAAO,SAAP,IAAAA,OAAO,WAAP,IAAAA,OAAO,CAAEjB,gBAAT,GACViB,OAAO,CAACjB,gBAAR,CAAyBU,EAAzB,EAA6BO,OAAO,CAACE,MAArC,CADU,GAEVnB,gBAAgB,CAACU,EAAD,EAAKO,OAAL,aAAKA,OAAL,uBAAKA,OAAO,CAAEE,MAAd,CAFpB;;AAIA,QAAID,KAAJ,EAAW;AACT,YAAME,MAAM,GAAGrB,kBAAkB,CAACmB,KAAD,EAAQD,OAAR,aAAQA,OAAR,uBAAQA,OAAO,CAAEE,MAAjB,CAAjC;;AAEA,UAAIC,MAAM,KAAKT,SAAf,EAA0B;AACxBN,QAAAA,UAAU,CAACgB,QAAX,CAAoBD,MAApB;AACD,OAFD,MAEO;AACLf,QAAAA,UAAU,CAACiB,KAAX,CAAiBJ,KAAjB;AACD;AACF,KARD,MAQO;AACL,YAAM,IAAIN,KAAJ,CAAU,iDAAV,CAAN;AACD;AACF,GAnCY,EAoCb,CAACL,OAAD,EAAUF,UAAV,CApCa,CAAf;AAuCA,SAAOG,MAAP;AACD","sourcesContent":["import {\r\n  getActionFromState,\r\n  getStateFromPath,\r\n  NavigationContainerRefContext,\r\n} from '@react-navigation/core';\r\nimport * as React from 'react';\r\n\r\nimport LinkingContext from './LinkingContext';\r\n\r\nexport type To<\r\n  ParamList extends ReactNavigation.RootParamList = ReactNavigation.RootParamList,\r\n  RouteName extends keyof ParamList = keyof ParamList\r\n> =\r\n  | string\r\n  | (undefined extends ParamList[RouteName]\r\n      ? {\r\n          screen: Extract<RouteName, string>;\r\n          params?: ParamList[RouteName];\r\n        }\r\n      : {\r\n          screen: Extract<RouteName, string>;\r\n          params: ParamList[RouteName];\r\n        });\r\n\r\nexport default function useLinkTo<\r\n  ParamList extends ReactNavigation.RootParamList\r\n>() {\r\n  const navigation = React.useContext(NavigationContainerRefContext);\r\n  const linking = React.useContext(LinkingContext);\r\n\r\n  const linkTo = React.useCallback(\r\n    (to: To<ParamList>) => {\r\n      if (navigation === undefined) {\r\n        throw new Error(\r\n          \"Couldn't find a navigation object. Is your component inside NavigationContainer?\"\r\n        );\r\n      }\r\n\r\n      if (typeof to !== 'string') {\r\n        // @ts-expect-error: This is fine\r\n        navigation.navigate(to.screen, to.params);\r\n        return;\r\n      }\r\n\r\n      if (!to.startsWith('/')) {\r\n        throw new Error(`The path must start with '/' (${to}).`);\r\n      }\r\n\r\n      const { options } = linking;\r\n\r\n      const state = options?.getStateFromPath\r\n        ? options.getStateFromPath(to, options.config)\r\n        : getStateFromPath(to, options?.config);\r\n\r\n      if (state) {\r\n        const action = getActionFromState(state, options?.config);\r\n\r\n        if (action !== undefined) {\r\n          navigation.dispatch(action);\r\n        } else {\r\n          navigation.reset(state);\r\n        }\r\n      } else {\r\n        throw new Error('Failed to parse the path to a navigation state.');\r\n      }\r\n    },\r\n    [linking, navigation]\r\n  );\r\n\r\n  return linkTo;\r\n}\r\n"]}