{"version":3,"sources":["useLinking.native.tsx"],"names":["getActionFromState","getActionFromStateDefault","getStateFromPath","getStateFromPathDefault","React","Linking","Platform","extractPathFromURL","linkingHandlers","useLinking","ref","independent","enabled","prefixes","filter","config","getInitialURL","Promise","race","resolve","setTimeout","subscribe","listener","callback","url","subscription","addEventListener","removeEventListener","bind","remove","useEffect","process","env","NODE_ENV","undefined","length","console","error","OS","join","trim","handler","Symbol","push","index","indexOf","splice","enabledRef","useRef","prefixesRef","filterRef","configRef","getInitialURLRef","getStateFromPathRef","getActionFromStateRef","current","getStateFromURL","useCallback","path","getInitialState","state","then","thenable","onfulfilled","catch","navigation","rootState","getRootState","routes","some","r","routeNames","includes","name","warn","action","dispatch","e","message","resetRoot"],"mappings":"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","sourcesContent":["import {\r\n  getActionFromState as getActionFromStateDefault,\r\n  getStateFromPath as getStateFromPathDefault,\r\n  NavigationContainerRef,\r\n  ParamListBase,\r\n} from '@react-navigation/core';\r\nimport * as React from 'react';\r\nimport { Linking, Platform } from 'react-native';\r\n\r\nimport extractPathFromURL from './extractPathFromURL';\r\nimport type { LinkingOptions } from './types';\r\n\r\ntype ResultState = ReturnType<typeof getStateFromPathDefault>;\r\n\r\ntype Options = LinkingOptions<ParamListBase> & {\r\n  independent?: boolean;\r\n};\r\n\r\nlet linkingHandlers: Symbol[] = [];\r\n\r\nexport default function useLinking(\r\n  ref: React.RefObject<NavigationContainerRef<ParamListBase>>,\r\n  {\r\n    independent,\r\n    enabled = true,\r\n    prefixes,\r\n    filter,\r\n    config,\r\n    getInitialURL = () =>\r\n      Promise.race([\r\n        Linking.getInitialURL(),\r\n        new Promise<undefined>((resolve) =>\r\n          // Timeout in 150ms if `getInitialState` doesn't resolve\r\n          // Workaround for https://github.com/facebook/react-native/issues/25675\r\n          setTimeout(resolve, 150)\r\n        ),\r\n      ]),\r\n    subscribe = (listener) => {\r\n      const callback = ({ url }: { url: string }) => listener(url);\r\n\r\n      const subscription = Linking.addEventListener('url', callback) as\r\n        | { remove(): void }\r\n        | undefined;\r\n\r\n      // Storing this in a local variable stops Jest from complaining about import after teardown\r\n      const removeEventListener = Linking.removeEventListener?.bind(Linking);\r\n\r\n      return () => {\r\n        // https://github.com/facebook/react-native/commit/6d1aca806cee86ad76de771ed3a1cc62982ebcd7\r\n        if (subscription?.remove) {\r\n          subscription.remove();\r\n        } else {\r\n          removeEventListener?.('url', callback);\r\n        }\r\n      };\r\n    },\r\n    getStateFromPath = getStateFromPathDefault,\r\n    getActionFromState = getActionFromStateDefault,\r\n  }: Options\r\n) {\r\n  React.useEffect(() => {\r\n    if (process.env.NODE_ENV === 'production') {\r\n      return undefined;\r\n    }\r\n\r\n    if (independent) {\r\n      return undefined;\r\n    }\r\n\r\n    if (enabled !== false && linkingHandlers.length) {\r\n      console.error(\r\n        [\r\n          'Looks like you have configured linking in multiple places. This is likely an error since deep links should only be handled in one place to avoid conflicts. Make sure that:',\r\n          \"- You don't have multiple NavigationContainers in the app each with 'linking' enabled\",\r\n          '- Only a single instance of the root component is rendered',\r\n          Platform.OS === 'android'\r\n            ? \"- You have set 'android:launchMode=singleTask' in the '<activity />' section of the 'AndroidManifest.xml' file to avoid launching multiple instances\"\r\n            : '',\r\n        ]\r\n          .join('\\n')\r\n          .trim()\r\n      );\r\n    }\r\n\r\n    const handler = Symbol();\r\n\r\n    if (enabled !== false) {\r\n      linkingHandlers.push(handler);\r\n    }\r\n\r\n    return () => {\r\n      const index = linkingHandlers.indexOf(handler);\r\n\r\n      if (index > -1) {\r\n        linkingHandlers.splice(index, 1);\r\n      }\r\n    };\r\n  }, [enabled, independent]);\r\n\r\n  // We store these options in ref to avoid re-creating getInitialState and re-subscribing listeners\r\n  // This lets user avoid wrapping the items in `React.useCallback` or `React.useMemo`\r\n  // Not re-creating `getInitialState` is important coz it makes it easier for the user to use in an effect\r\n  const enabledRef = React.useRef(enabled);\r\n  const prefixesRef = React.useRef(prefixes);\r\n  const filterRef = React.useRef(filter);\r\n  const configRef = React.useRef(config);\r\n  const getInitialURLRef = React.useRef(getInitialURL);\r\n  const getStateFromPathRef = React.useRef(getStateFromPath);\r\n  const getActionFromStateRef = React.useRef(getActionFromState);\r\n\r\n  React.useEffect(() => {\r\n    enabledRef.current = enabled;\r\n    prefixesRef.current = prefixes;\r\n    filterRef.current = filter;\r\n    configRef.current = config;\r\n    getInitialURLRef.current = getInitialURL;\r\n    getStateFromPathRef.current = getStateFromPath;\r\n    getActionFromStateRef.current = getActionFromState;\r\n  });\r\n\r\n  const getStateFromURL = React.useCallback(\r\n    (url: string | null | undefined) => {\r\n      if (!url || (filterRef.current && !filterRef.current(url))) {\r\n        return undefined;\r\n      }\r\n\r\n      const path = extractPathFromURL(prefixesRef.current, url);\r\n\r\n      return path !== undefined\r\n        ? getStateFromPathRef.current(path, configRef.current)\r\n        : undefined;\r\n    },\r\n    []\r\n  );\r\n\r\n  const getInitialState = React.useCallback(() => {\r\n    let state: ResultState | undefined;\r\n\r\n    if (enabledRef.current) {\r\n      const url = getInitialURLRef.current();\r\n\r\n      if (url != null && typeof url !== 'string') {\r\n        return url.then((url) => {\r\n          const state = getStateFromURL(url);\r\n\r\n          return state;\r\n        });\r\n      }\r\n\r\n      state = getStateFromURL(url);\r\n    }\r\n\r\n    const thenable = {\r\n      then(onfulfilled?: (state: ResultState | undefined) => void) {\r\n        return Promise.resolve(onfulfilled ? onfulfilled(state) : state);\r\n      },\r\n      catch() {\r\n        return thenable;\r\n      },\r\n    };\r\n\r\n    return thenable as PromiseLike<ResultState | undefined>;\r\n  }, [getStateFromURL]);\r\n\r\n  React.useEffect(() => {\r\n    const listener = (url: string) => {\r\n      if (!enabled) {\r\n        return;\r\n      }\r\n\r\n      const navigation = ref.current;\r\n      const state = navigation ? getStateFromURL(url) : undefined;\r\n\r\n      if (navigation && state) {\r\n        // Make sure that the routes in the state exist in the root navigator\r\n        // Otherwise there's an error in the linking configuration\r\n        const rootState = navigation.getRootState();\r\n\r\n        if (state.routes.some((r) => !rootState?.routeNames.includes(r.name))) {\r\n          console.warn(\r\n            \"The navigation state parsed from the URL contains routes not present in the root navigator. This usually means that the linking configuration doesn't match the navigation structure. See https://reactnavigation.org/docs/configuring-links for more details on how to specify a linking configuration.\"\r\n          );\r\n          return;\r\n        }\r\n\r\n        const action = getActionFromStateRef.current(state, configRef.current);\r\n\r\n        if (action !== undefined) {\r\n          try {\r\n            navigation.dispatch(action);\r\n          } catch (e) {\r\n            // Ignore any errors from deep linking.\r\n            // This could happen in case of malformed links, navigation object not being initialized etc.\r\n            console.warn(\r\n              `An error occurred when trying to handle the link '${url}': ${\r\n                typeof e === 'object' && e != null && 'message' in e\r\n                  ? // @ts-expect-error: we're already checking for this\r\n                    e.message\r\n                  : e\r\n              }`\r\n            );\r\n          }\r\n        } else {\r\n          navigation.resetRoot(state);\r\n        }\r\n      }\r\n    };\r\n\r\n    return subscribe(listener);\r\n  }, [enabled, getStateFromURL, ref, subscribe]);\r\n\r\n  return {\r\n    getInitialState,\r\n  };\r\n}\r\n"]}